// --------------------------------------------------------------------------
// IBM ILOG CP Optimizer model export file
// --------------------------------------------------------------------------

// ------ Interval-related variables: ---------------------------------------

Op_1_1       = intervalVar();
Op_1_1_M5    = intervalVar(optional, size=88);
Op_1_2       = intervalVar();
Op_1_2_M9    = intervalVar(optional, size=68);
Op_1_3       = intervalVar();
Op_1_3_M7    = intervalVar(optional, size=94);
Op_1_4       = intervalVar();
Op_1_4_M6    = intervalVar(optional, size=99);
Op_1_5       = intervalVar();
Op_1_5_M2    = intervalVar(optional, size=67);
Op_1_5_M8    = intervalVar(optional, size=67);
Op_1_6       = intervalVar();
Op_1_6_M3    = intervalVar(optional, size=89);
Op_1_7       = intervalVar();
Op_1_7_M10   = intervalVar(optional, size=77);
Op_1_8       = intervalVar();
Op_1_8_M8    = intervalVar(optional, size=99);
Op_1_9       = intervalVar();
Op_1_9_M1    = intervalVar(optional, size=86);
Op_1_10      = intervalVar();
Op_1_10_M4   = intervalVar(optional, size=92);
Op_2_1       = intervalVar();
Op_2_1_M6    = intervalVar(optional, size=72);
Op_2_2       = intervalVar();
Op_2_2_M4    = intervalVar(optional, size=50);
Op_2_3       = intervalVar();
Op_2_3_M7    = intervalVar(optional, size=69);
Op_2_3_M6    = intervalVar(optional, size=69);
Op_2_4       = intervalVar();
Op_2_4_M5    = intervalVar(optional, size=75);
Op_2_5       = intervalVar();
Op_2_5_M3    = intervalVar(optional, size=94);
Op_2_6       = intervalVar();
Op_2_6_M9    = intervalVar(optional, size=66);
Op_2_7       = intervalVar();
Op_2_7_M1    = intervalVar(optional, size=92);
Op_2_7_M6    = intervalVar(optional, size=92);
Op_2_8       = intervalVar();
Op_2_8_M2    = intervalVar(optional, size=82);
Op_2_9       = intervalVar();
Op_2_9_M8    = intervalVar(optional, size=94);
Op_2_10      = intervalVar();
Op_2_10_M10  = intervalVar(optional, size=63);
Op_3_1       = intervalVar();
Op_3_1_M10   = intervalVar(optional, size=83);
Op_3_2       = intervalVar();
Op_3_2_M9    = intervalVar(optional, size=61);
Op_3_2_M10   = intervalVar(optional, size=61);
Op_3_3       = intervalVar();
Op_3_3_M1    = intervalVar(optional, size=83);
Op_3_4       = intervalVar();
Op_3_4_M2    = intervalVar(optional, size=65);
Op_3_5       = intervalVar();
Op_3_5_M7    = intervalVar(optional, size=64);
Op_3_6       = intervalVar();
Op_3_6_M6    = intervalVar(optional, size=85);
Op_3_7       = intervalVar();
Op_3_7_M8    = intervalVar(optional, size=78);
Op_3_8       = intervalVar();
Op_3_8_M5    = intervalVar(optional, size=85);
Op_3_9       = intervalVar();
Op_3_9_M3    = intervalVar(optional, size=55);
Op_3_9_M4    = intervalVar(optional, size=55);
Op_3_10      = intervalVar();
Op_3_10_M4   = intervalVar(optional, size=77);
Op_4_1       = intervalVar();
Op_4_1_M8    = intervalVar(optional, size=94);
Op_4_2       = intervalVar();
Op_4_2_M3    = intervalVar(optional, size=68);
Op_4_2_M10   = intervalVar(optional, size=68);
Op_4_3       = intervalVar();
Op_4_3_M2    = intervalVar(optional, size=61);
Op_4_4       = intervalVar();
Op_4_4_M5    = intervalVar(optional, size=99);
Op_4_5       = intervalVar();
Op_4_5_M4    = intervalVar(optional, size=54);
Op_4_6       = intervalVar();
Op_4_6_M7    = intervalVar(optional, size=75);
Op_4_7       = intervalVar();
Op_4_7_M6    = intervalVar(optional, size=66);
Op_4_8       = intervalVar();
Op_4_8_M1    = intervalVar(optional, size=76);
Op_4_9       = intervalVar();
Op_4_9_M10   = intervalVar(optional, size=63);
Op_4_10      = intervalVar();
Op_4_10_M9   = intervalVar(optional, size=67);
Op_5_1       = intervalVar();
Op_5_1_M4    = intervalVar(optional, size=69);
Op_5_2       = intervalVar();
Op_5_2_M5    = intervalVar(optional, size=88);
Op_5_2_M3    = intervalVar(optional, size=88);
Op_5_3       = intervalVar();
Op_5_3_M10   = intervalVar(optional, size=82);
Op_5_4       = intervalVar();
Op_5_4_M9    = intervalVar(optional, size=95);
Op_5_5       = intervalVar();
Op_5_5_M1    = intervalVar(optional, size=99);
Op_5_5_M5    = intervalVar(optional, size=99);
Op_5_6       = intervalVar();
Op_5_6_M3    = intervalVar(optional, size=67);
Op_5_7       = intervalVar();
Op_5_7_M7    = intervalVar(optional, size=95);
Op_5_8       = intervalVar();
Op_5_8_M6    = intervalVar(optional, size=68);
Op_5_9       = intervalVar();
Op_5_9_M8    = intervalVar(optional, size=67);
Op_5_9_M9    = intervalVar(optional, size=67);
Op_5_10      = intervalVar();
Op_5_10_M2   = intervalVar(optional, size=86);
Op_6_1       = intervalVar();
Op_6_1_M2    = intervalVar(optional, size=99);
Op_6_1_M8    = intervalVar(optional, size=99);
Op_6_2       = intervalVar();
Op_6_2_M5    = intervalVar(optional, size=81);
Op_6_3       = intervalVar();
Op_6_3_M6    = intervalVar(optional, size=64);
Op_6_4       = intervalVar();
Op_6_4_M7    = intervalVar(optional, size=66);
Op_6_5       = intervalVar();
Op_6_5_M9    = intervalVar(optional, size=80);
Op_6_6       = intervalVar();
Op_6_6_M3    = intervalVar(optional, size=80);
Op_6_7       = intervalVar();
Op_6_7_M8    = intervalVar(optional, size=69);
Op_6_8       = intervalVar();
Op_6_8_M10   = intervalVar(optional, size=62);
Op_6_9       = intervalVar();
Op_6_9_M4    = intervalVar(optional, size=79);
Op_6_10      = intervalVar();
Op_6_10_M1   = intervalVar(optional, size=88);
Op_7_1       = intervalVar();
Op_7_1_M8    = intervalVar(optional, size=50);
Op_7_2       = intervalVar();
Op_7_2_M2    = intervalVar(optional, size=86);
Op_7_3       = intervalVar();
Op_7_3_M5    = intervalVar(optional, size=97);
Op_7_4       = intervalVar();
Op_7_4_M4    = intervalVar(optional, size=96);
Op_7_5       = intervalVar();
Op_7_5_M1    = intervalVar(optional, size=95);
Op_7_6       = intervalVar();
Op_7_6_M9    = intervalVar(optional, size=97);
Op_7_7       = intervalVar();
Op_7_7_M3    = intervalVar(optional, size=66);
Op_7_8       = intervalVar();
Op_7_8_M6    = intervalVar(optional, size=99);
Op_7_9       = intervalVar();
Op_7_9_M7    = intervalVar(optional, size=52);
Op_7_10      = intervalVar();
Op_7_10_M10  = intervalVar(optional, size=71);
Op_8_1       = intervalVar();
Op_8_1_M5    = intervalVar(optional, size=98);
Op_8_2       = intervalVar();
Op_8_2_M7    = intervalVar(optional, size=73);
Op_8_2_M3    = intervalVar(optional, size=73);
Op_8_3       = intervalVar();
Op_8_3_M4    = intervalVar(optional, size=82);
Op_8_4       = intervalVar();
Op_8_4_M3    = intervalVar(optional, size=51);
Op_8_5       = intervalVar();
Op_8_5_M2    = intervalVar(optional, size=71);
Op_8_6       = intervalVar();
Op_8_6_M6    = intervalVar(optional, size=94);
Op_8_7       = intervalVar();
Op_8_7_M8    = intervalVar(optional, size=85);
Op_8_8       = intervalVar();
Op_8_8_M1    = intervalVar(optional, size=62);
Op_8_9       = intervalVar();
Op_8_9_M9    = intervalVar(optional, size=95);
Op_8_10      = intervalVar();
Op_8_10_M10  = intervalVar(optional, size=79);
Op_9_1       = intervalVar();
Op_9_1_M1    = intervalVar(optional, size=94);
Op_9_2       = intervalVar();
Op_9_2_M7    = intervalVar(optional, size=71);
Op_9_2_M5    = intervalVar(optional, size=71);
Op_9_3       = intervalVar();
Op_9_3_M4    = intervalVar(optional, size=81);
Op_9_4       = intervalVar();
Op_9_4_M8    = intervalVar(optional, size=85);
Op_9_5       = intervalVar();
Op_9_5_M2    = intervalVar(optional, size=66);
Op_9_6       = intervalVar();
Op_9_6_M3    = intervalVar(optional, size=90);
Op_9_7       = intervalVar();
Op_9_7_M5    = intervalVar(optional, size=76);
Op_9_8       = intervalVar();
Op_9_8_M6    = intervalVar(optional, size=58);
Op_9_9       = intervalVar();
Op_9_9_M9    = intervalVar(optional, size=93);
Op_9_10      = intervalVar();
Op_9_10_M10  = intervalVar(optional, size=97);
Op_10_1      = intervalVar();
Op_10_1_M4   = intervalVar(optional, size=50);
Op_10_2      = intervalVar();
Op_10_2_M1   = intervalVar(optional, size=59);
Op_10_3      = intervalVar();
Op_10_3_M2   = intervalVar(optional, size=82);
Op_10_3_M5   = intervalVar(optional, size=82);
Op_10_4      = intervalVar();
Op_10_4_M9   = intervalVar(optional, size=67);
Op_10_5      = intervalVar();
Op_10_5_M8   = intervalVar(optional, size=56);
Op_10_6      = intervalVar();
Op_10_6_M10  = intervalVar(optional, size=96);
Op_10_7      = intervalVar();
Op_10_7_M7   = intervalVar(optional, size=58);
Op_10_8      = intervalVar();
Op_10_8_M5   = intervalVar(optional, size=81);
Op_10_9      = intervalVar();
Op_10_9_M6   = intervalVar(optional, size=59);
Op_10_10     = intervalVar();
Op_10_10_M3  = intervalVar(optional, size=96);

M1 = sequenceVar([Op_1_9_M1, Op_2_7_M1, Op_3_3_M1, Op_4_8_M1, Op_5_5_M1, Op_6_10_M1, Op_7_5_M1, Op_8_8_M1, Op_9_1_M1, Op_10_2_M1]);
M2 = sequenceVar([Op_1_5_M2, Op_2_8_M2, Op_3_4_M2, Op_4_3_M2, Op_5_10_M2, Op_6_1_M2, Op_7_2_M2, Op_8_5_M2, Op_9_5_M2, Op_10_3_M2]);
M3 = sequenceVar([Op_1_6_M3, Op_2_5_M3, Op_3_9_M3, Op_4_2_M3, Op_5_2_M3, Op_5_6_M3, Op_6_6_M3, Op_7_7_M3, Op_8_2_M3, Op_8_4_M3, Op_9_6_M3, Op_10_10_M3]);
M4 = sequenceVar([Op_1_10_M4, Op_2_2_M4, Op_3_9_M4, Op_3_10_M4, Op_4_5_M4, Op_5_1_M4, Op_6_9_M4, Op_7_4_M4, Op_8_3_M4, Op_9_3_M4, Op_10_1_M4]);
M5 = sequenceVar([Op_1_1_M5, Op_2_4_M5, Op_3_8_M5, Op_4_4_M5, Op_5_2_M5, Op_5_5_M5, Op_6_2_M5, Op_7_3_M5, Op_8_1_M5, Op_9_2_M5, Op_9_7_M5, Op_10_3_M5, Op_10_8_M5]);
M6 = sequenceVar([Op_1_4_M6, Op_2_1_M6, Op_2_3_M6, Op_2_7_M6, Op_3_6_M6, Op_4_7_M6, Op_5_8_M6, Op_6_3_M6, Op_7_8_M6, Op_8_6_M6, Op_9_8_M6, Op_10_9_M6]);
M7 = sequenceVar([Op_1_3_M7, Op_2_3_M7, Op_3_5_M7, Op_4_6_M7, Op_5_7_M7, Op_6_4_M7, Op_7_9_M7, Op_8_2_M7, Op_9_2_M7, Op_10_7_M7]);
M8 = sequenceVar([Op_1_5_M8, Op_1_8_M8, Op_2_9_M8, Op_3_7_M8, Op_4_1_M8, Op_5_9_M8, Op_6_1_M8, Op_6_7_M8, Op_7_1_M8, Op_8_7_M8, Op_9_4_M8, Op_10_5_M8]);
M9 = sequenceVar([Op_1_2_M9, Op_2_6_M9, Op_3_2_M9, Op_4_10_M9, Op_5_4_M9, Op_5_9_M9, Op_6_5_M9, Op_7_6_M9, Op_8_9_M9, Op_9_9_M9, Op_10_4_M9]);
M10 = sequenceVar([Op_1_7_M10, Op_2_10_M10, Op_3_1_M10, Op_3_2_M10, Op_4_2_M10, Op_4_9_M10, Op_5_3_M10, Op_6_8_M10, Op_7_10_M10, Op_8_10_M10, Op_9_10_M10, Op_10_6_M10]);

// ------ Objective: --------------------------------------------------------

minimize(max([endOf(Op_1_10), endOf(Op_2_10), endOf(Op_3_10), endOf(Op_4_10), endOf(Op_5_10), endOf(Op_6_10), endOf(Op_7_10), endOf(Op_8_10), endOf(Op_9_10), endOf(Op_10_10)]));

// ------ Constraints: ------------------------------------------------------

alternative(Op_1_1,   [Op_1_1_M5]);
alternative(Op_1_2,   [Op_1_2_M9]);
alternative(Op_1_3,   [Op_1_3_M7]);
alternative(Op_1_4,   [Op_1_4_M6]);
alternative(Op_1_5,   [Op_1_5_M2, Op_1_5_M8]);
alternative(Op_1_6,   [Op_1_6_M3]);
alternative(Op_1_7,   [Op_1_7_M10]);
alternative(Op_1_8,   [Op_1_8_M8]);
alternative(Op_1_9,   [Op_1_9_M1]);
alternative(Op_1_10,  [Op_1_10_M4]);
alternative(Op_2_1,   [Op_2_1_M6]);
alternative(Op_2_2,   [Op_2_2_M4]);
alternative(Op_2_3,   [Op_2_3_M7, Op_2_3_M6]);
alternative(Op_2_4,   [Op_2_4_M5]);
alternative(Op_2_5,   [Op_2_5_M3]);
alternative(Op_2_6,   [Op_2_6_M9]);
alternative(Op_2_7,   [Op_2_7_M1, Op_2_7_M6]);
alternative(Op_2_8,   [Op_2_8_M2]);
alternative(Op_2_9,   [Op_2_9_M8]);
alternative(Op_2_10,  [Op_2_10_M10]);
alternative(Op_3_1,   [Op_3_1_M10]);
alternative(Op_3_2,   [Op_3_2_M9, Op_3_2_M10]);
alternative(Op_3_3,   [Op_3_3_M1]);
alternative(Op_3_4,   [Op_3_4_M2]);
alternative(Op_3_5,   [Op_3_5_M7]);
alternative(Op_3_6,   [Op_3_6_M6]);
alternative(Op_3_7,   [Op_3_7_M8]);
alternative(Op_3_8,   [Op_3_8_M5]);
alternative(Op_3_9,   [Op_3_9_M3, Op_3_9_M4]);
alternative(Op_3_10,  [Op_3_10_M4]);
alternative(Op_4_1,   [Op_4_1_M8]);
alternative(Op_4_2,   [Op_4_2_M3, Op_4_2_M10]);
alternative(Op_4_3,   [Op_4_3_M2]);
alternative(Op_4_4,   [Op_4_4_M5]);
alternative(Op_4_5,   [Op_4_5_M4]);
alternative(Op_4_6,   [Op_4_6_M7]);
alternative(Op_4_7,   [Op_4_7_M6]);
alternative(Op_4_8,   [Op_4_8_M1]);
alternative(Op_4_9,   [Op_4_9_M10]);
alternative(Op_4_10,  [Op_4_10_M9]);
alternative(Op_5_1,   [Op_5_1_M4]);
alternative(Op_5_2,   [Op_5_2_M5, Op_5_2_M3]);
alternative(Op_5_3,   [Op_5_3_M10]);
alternative(Op_5_4,   [Op_5_4_M9]);
alternative(Op_5_5,   [Op_5_5_M1, Op_5_5_M5]);
alternative(Op_5_6,   [Op_5_6_M3]);
alternative(Op_5_7,   [Op_5_7_M7]);
alternative(Op_5_8,   [Op_5_8_M6]);
alternative(Op_5_9,   [Op_5_9_M8, Op_5_9_M9]);
alternative(Op_5_10,  [Op_5_10_M2]);
alternative(Op_6_1,   [Op_6_1_M2, Op_6_1_M8]);
alternative(Op_6_2,   [Op_6_2_M5]);
alternative(Op_6_3,   [Op_6_3_M6]);
alternative(Op_6_4,   [Op_6_4_M7]);
alternative(Op_6_5,   [Op_6_5_M9]);
alternative(Op_6_6,   [Op_6_6_M3]);
alternative(Op_6_7,   [Op_6_7_M8]);
alternative(Op_6_8,   [Op_6_8_M10]);
alternative(Op_6_9,   [Op_6_9_M4]);
alternative(Op_6_10,  [Op_6_10_M1]);
alternative(Op_7_1,   [Op_7_1_M8]);
alternative(Op_7_2,   [Op_7_2_M2]);
alternative(Op_7_3,   [Op_7_3_M5]);
alternative(Op_7_4,   [Op_7_4_M4]);
alternative(Op_7_5,   [Op_7_5_M1]);
alternative(Op_7_6,   [Op_7_6_M9]);
alternative(Op_7_7,   [Op_7_7_M3]);
alternative(Op_7_8,   [Op_7_8_M6]);
alternative(Op_7_9,   [Op_7_9_M7]);
alternative(Op_7_10,  [Op_7_10_M10]);
alternative(Op_8_1,   [Op_8_1_M5]);
alternative(Op_8_2,   [Op_8_2_M7, Op_8_2_M3]);
alternative(Op_8_3,   [Op_8_3_M4]);
alternative(Op_8_4,   [Op_8_4_M3]);
alternative(Op_8_5,   [Op_8_5_M2]);
alternative(Op_8_6,   [Op_8_6_M6]);
alternative(Op_8_7,   [Op_8_7_M8]);
alternative(Op_8_8,   [Op_8_8_M1]);
alternative(Op_8_9,   [Op_8_9_M9]);
alternative(Op_8_10,  [Op_8_10_M10]);
alternative(Op_9_1,   [Op_9_1_M1]);
alternative(Op_9_2,   [Op_9_2_M7, Op_9_2_M5]);
alternative(Op_9_3,   [Op_9_3_M4]);
alternative(Op_9_4,   [Op_9_4_M8]);
alternative(Op_9_5,   [Op_9_5_M2]);
alternative(Op_9_6,   [Op_9_6_M3]);
alternative(Op_9_7,   [Op_9_7_M5]);
alternative(Op_9_8,   [Op_9_8_M6]);
alternative(Op_9_9,   [Op_9_9_M9]);
alternative(Op_9_10,  [Op_9_10_M10]);
alternative(Op_10_1,  [Op_10_1_M4]);
alternative(Op_10_2,  [Op_10_2_M1]);
alternative(Op_10_3,  [Op_10_3_M2, Op_10_3_M5]);
alternative(Op_10_4,  [Op_10_4_M9]);
alternative(Op_10_5,  [Op_10_5_M8]);
alternative(Op_10_6,  [Op_10_6_M10]);
alternative(Op_10_7,  [Op_10_7_M7]);
alternative(Op_10_8,  [Op_10_8_M5]);
alternative(Op_10_9,  [Op_10_9_M6]);
alternative(Op_10_10, [Op_10_10_M3]);

endBeforeStart(Op_1_1,  Op_1_2);
endBeforeStart(Op_1_2,  Op_1_3);
endBeforeStart(Op_1_3,  Op_1_4);
endBeforeStart(Op_1_4,  Op_1_5);
endBeforeStart(Op_1_5,  Op_1_6);
endBeforeStart(Op_1_6,  Op_1_7);
endBeforeStart(Op_1_7,  Op_1_8);
endBeforeStart(Op_1_8,  Op_1_9);
endBeforeStart(Op_1_9,  Op_1_10);
endBeforeStart(Op_2_1,  Op_2_2);
endBeforeStart(Op_2_2,  Op_2_3);
endBeforeStart(Op_2_3,  Op_2_4);
endBeforeStart(Op_2_4,  Op_2_5);
endBeforeStart(Op_2_5,  Op_2_6);
endBeforeStart(Op_2_6,  Op_2_7);
endBeforeStart(Op_2_7,  Op_2_8);
endBeforeStart(Op_2_8,  Op_2_9);
endBeforeStart(Op_2_9,  Op_2_10);
endBeforeStart(Op_3_1,  Op_3_2);
endBeforeStart(Op_3_2,  Op_3_3);
endBeforeStart(Op_3_3,  Op_3_4);
endBeforeStart(Op_3_4,  Op_3_5);
endBeforeStart(Op_3_5,  Op_3_6);
endBeforeStart(Op_3_6,  Op_3_7);
endBeforeStart(Op_3_7,  Op_3_8);
endBeforeStart(Op_3_8,  Op_3_9);
endBeforeStart(Op_3_9,  Op_3_10);
endBeforeStart(Op_4_1,  Op_4_2);
endBeforeStart(Op_4_2,  Op_4_3);
endBeforeStart(Op_4_3,  Op_4_4);
endBeforeStart(Op_4_4,  Op_4_5);
endBeforeStart(Op_4_5,  Op_4_6);
endBeforeStart(Op_4_6,  Op_4_7);
endBeforeStart(Op_4_7,  Op_4_8);
endBeforeStart(Op_4_8,  Op_4_9);
endBeforeStart(Op_4_9,  Op_4_10);
endBeforeStart(Op_5_1,  Op_5_2);
endBeforeStart(Op_5_2,  Op_5_3);
endBeforeStart(Op_5_3,  Op_5_4);
endBeforeStart(Op_5_4,  Op_5_5);
endBeforeStart(Op_5_5,  Op_5_6);
endBeforeStart(Op_5_6,  Op_5_7);
endBeforeStart(Op_5_7,  Op_5_8);
endBeforeStart(Op_5_8,  Op_5_9);
endBeforeStart(Op_5_9,  Op_5_10);
endBeforeStart(Op_6_1,  Op_6_2);
endBeforeStart(Op_6_2,  Op_6_3);
endBeforeStart(Op_6_3,  Op_6_4);
endBeforeStart(Op_6_4,  Op_6_5);
endBeforeStart(Op_6_5,  Op_6_6);
endBeforeStart(Op_6_6,  Op_6_7);
endBeforeStart(Op_6_7,  Op_6_8);
endBeforeStart(Op_6_8,  Op_6_9);
endBeforeStart(Op_6_9,  Op_6_10);
endBeforeStart(Op_7_1,  Op_7_2);
endBeforeStart(Op_7_2,  Op_7_3);
endBeforeStart(Op_7_3,  Op_7_4);
endBeforeStart(Op_7_4,  Op_7_5);
endBeforeStart(Op_7_5,  Op_7_6);
endBeforeStart(Op_7_6,  Op_7_7);
endBeforeStart(Op_7_7,  Op_7_8);
endBeforeStart(Op_7_8,  Op_7_9);
endBeforeStart(Op_7_9,  Op_7_10);
endBeforeStart(Op_8_1,  Op_8_2);
endBeforeStart(Op_8_2,  Op_8_3);
endBeforeStart(Op_8_3,  Op_8_4);
endBeforeStart(Op_8_4,  Op_8_5);
endBeforeStart(Op_8_5,  Op_8_6);
endBeforeStart(Op_8_6,  Op_8_7);
endBeforeStart(Op_8_7,  Op_8_8);
endBeforeStart(Op_8_8,  Op_8_9);
endBeforeStart(Op_8_9,  Op_8_10);
endBeforeStart(Op_9_1,  Op_9_2);
endBeforeStart(Op_9_2,  Op_9_3);
endBeforeStart(Op_9_3,  Op_9_4);
endBeforeStart(Op_9_4,  Op_9_5);
endBeforeStart(Op_9_5,  Op_9_6);
endBeforeStart(Op_9_6,  Op_9_7);
endBeforeStart(Op_9_7,  Op_9_8);
endBeforeStart(Op_9_8,  Op_9_9);
endBeforeStart(Op_9_9,  Op_9_10);
endBeforeStart(Op_10_1, Op_10_2);
endBeforeStart(Op_10_2, Op_10_3);
endBeforeStart(Op_10_3, Op_10_4);
endBeforeStart(Op_10_4, Op_10_5);
endBeforeStart(Op_10_5, Op_10_6);
endBeforeStart(Op_10_6, Op_10_7);
endBeforeStart(Op_10_7, Op_10_8);
endBeforeStart(Op_10_8, Op_10_9);
endBeforeStart(Op_10_9, Op_10_10);

noOverlap(M1);
noOverlap(M2);
noOverlap(M3);
noOverlap(M4);
noOverlap(M5);
noOverlap(M6);
noOverlap(M7);
noOverlap(M8);
noOverlap(M9);
noOverlap(M10);


