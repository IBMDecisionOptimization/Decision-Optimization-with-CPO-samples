// --------------------------------------------------------------------------
// IBM ILOG CP Optimizer model export file
// --------------------------------------------------------------------------

// ------ Interval-related variables: ---------------------------------------

Op_1_1   = intervalVar(size=29);
Op_1_2   = intervalVar(size=78);
Op_1_3   = intervalVar(size=9);
Op_1_4   = intervalVar(size=36);
Op_1_5   = intervalVar(size=49);
Op_1_6   = intervalVar(size=11);
Op_1_7   = intervalVar(size=62);
Op_1_8   = intervalVar(size=56);
Op_1_9   = intervalVar(size=44);
Op_1_10  = intervalVar(size=21);
Op_2_1   = intervalVar(size=43);
Op_2_2   = intervalVar(size=90);
Op_2_3   = intervalVar(size=75);
Op_2_4   = intervalVar(size=11);
Op_2_5   = intervalVar(size=69);
Op_2_6   = intervalVar(size=28);
Op_2_7   = intervalVar(size=46);
Op_2_8   = intervalVar(size=46);
Op_2_9   = intervalVar(size=72);
Op_2_10  = intervalVar(size=30);
Op_3_1   = intervalVar(size=91);
Op_3_2   = intervalVar(size=85);
Op_3_3   = intervalVar(size=39);
Op_3_4   = intervalVar(size=74);
Op_3_5   = intervalVar(size=90);
Op_3_6   = intervalVar(size=10);
Op_3_7   = intervalVar(size=12);
Op_3_8   = intervalVar(size=89);
Op_3_9   = intervalVar(size=45);
Op_3_10  = intervalVar(size=33);
Op_4_1   = intervalVar(size=81);
Op_4_2   = intervalVar(size=95);
Op_4_3   = intervalVar(size=71);
Op_4_4   = intervalVar(size=99);
Op_4_5   = intervalVar(size=9);
Op_4_6   = intervalVar(size=52);
Op_4_7   = intervalVar(size=85);
Op_4_8   = intervalVar(size=98);
Op_4_9   = intervalVar(size=22);
Op_4_10  = intervalVar(size=43);
Op_5_1   = intervalVar(size=14);
Op_5_2   = intervalVar(size=6);
Op_5_3   = intervalVar(size=22);
Op_5_4   = intervalVar(size=61);
Op_5_5   = intervalVar(size=26);
Op_5_6   = intervalVar(size=69);
Op_5_7   = intervalVar(size=21);
Op_5_8   = intervalVar(size=49);
Op_5_9   = intervalVar(size=72);
Op_5_10  = intervalVar(size=53);
Op_6_1   = intervalVar(size=84);
Op_6_2   = intervalVar(size=2);
Op_6_3   = intervalVar(size=52);
Op_6_4   = intervalVar(size=95);
Op_6_5   = intervalVar(size=48);
Op_6_6   = intervalVar(size=72);
Op_6_7   = intervalVar(size=47);
Op_6_8   = intervalVar(size=65);
Op_6_9   = intervalVar(size=6);
Op_6_10  = intervalVar(size=25);
Op_7_1   = intervalVar(size=46);
Op_7_2   = intervalVar(size=37);
Op_7_3   = intervalVar(size=61);
Op_7_4   = intervalVar(size=13);
Op_7_5   = intervalVar(size=32);
Op_7_6   = intervalVar(size=21);
Op_7_7   = intervalVar(size=32);
Op_7_8   = intervalVar(size=89);
Op_7_9   = intervalVar(size=30);
Op_7_10  = intervalVar(size=55);
Op_8_1   = intervalVar(size=31);
Op_8_2   = intervalVar(size=86);
Op_8_3   = intervalVar(size=46);
Op_8_4   = intervalVar(size=74);
Op_8_5   = intervalVar(size=32);
Op_8_6   = intervalVar(size=88);
Op_8_7   = intervalVar(size=19);
Op_8_8   = intervalVar(size=48);
Op_8_9   = intervalVar(size=36);
Op_8_10  = intervalVar(size=79);
Op_9_1   = intervalVar(size=76);
Op_9_2   = intervalVar(size=69);
Op_9_3   = intervalVar(size=76);
Op_9_4   = intervalVar(size=51);
Op_9_5   = intervalVar(size=85);
Op_9_6   = intervalVar(size=11);
Op_9_7   = intervalVar(size=40);
Op_9_8   = intervalVar(size=89);
Op_9_9   = intervalVar(size=26);
Op_9_10  = intervalVar(size=74);
Op_10_1  = intervalVar(size=85);
Op_10_2  = intervalVar(size=13);
Op_10_3  = intervalVar(size=61);
Op_10_4  = intervalVar(size=7);
Op_10_5  = intervalVar(size=64);
Op_10_6  = intervalVar(size=76);
Op_10_7  = intervalVar(size=47);
Op_10_8  = intervalVar(size=52);
Op_10_9  = intervalVar(size=90);
Op_10_10 = intervalVar(size=45);
Machine_0 = sequenceVar([Op_1_1,  Op_2_1,  Op_3_2,  Op_4_3,  Op_5_2,  Op_6_7,  Op_7_2,  Op_8_2,  Op_9_1,  Op_10_2]);
Machine_1 = sequenceVar([Op_1_2,  Op_2_6,  Op_3_1,  Op_4_1,  Op_5_3,  Op_6_2,  Op_7_1,  Op_8_3,  Op_9_2,  Op_10_1]);
Machine_2 = sequenceVar([Op_1_3,  Op_2_2,  Op_3_4,  Op_4_2,  Op_5_1,  Op_6_1,  Op_7_4,  Op_8_1,  Op_9_5,  Op_10_3]);
Machine_3 = sequenceVar([Op_1_4,  Op_2_5,  Op_3_3,  Op_4_8,  Op_5_5,  Op_6_4,  Op_7_3,  Op_8_10, Op_9_3,  Op_10_8]);
Machine_4 = sequenceVar([Op_1_5,  Op_2_3,  Op_3_10, Op_4_4,  Op_5_6,  Op_6_9,  Op_7_10, Op_8_5,  Op_9_9,  Op_10_9]);
Machine_5 = sequenceVar([Op_1_6,  Op_2_8,  Op_3_6,  Op_4_10, Op_5_4,  Op_6_3,  Op_7_6,  Op_8_4,  Op_9_4,  Op_10_7]);
Machine_6 = sequenceVar([Op_1_7,  Op_2_7,  Op_3_8,  Op_4_5,  Op_5_10, Op_6_8,  Op_7_5,  Op_8_6,  Op_9_7,  Op_10_4]);
Machine_7 = sequenceVar([Op_1_8,  Op_2_9,  Op_3_7,  Op_4_7,  Op_5_8,  Op_6_10, Op_7_9,  Op_8_9,  Op_9_8,  Op_10_10]);
Machine_8 = sequenceVar([Op_1_9,  Op_2_10, Op_3_5,  Op_4_6,  Op_5_7,  Op_6_5,  Op_7_8,  Op_8_7,  Op_9_10, Op_10_5]);
Machine_9 = sequenceVar([Op_1_10, Op_2_4,  Op_3_9,  Op_4_9,  Op_5_9,  Op_6_6,  Op_7_7,  Op_8_8,  Op_9_6,  Op_10_6]);

// ------ Objective: --------------------------------------------------------

minimize(max([endOf(Op_1_10), endOf(Op_2_10), endOf(Op_3_10), endOf(Op_4_10), endOf(Op_5_10), endOf(Op_6_10), endOf(Op_7_10), endOf(Op_8_10), endOf(Op_9_10), endOf(Op_10_10)]));

// ------ Constraints: ------------------------------------------------------

endBeforeStart(Op_1_1,  Op_1_2);
endBeforeStart(Op_1_2,  Op_1_3);
endBeforeStart(Op_1_3,  Op_1_4);
endBeforeStart(Op_1_4,  Op_1_5);
endBeforeStart(Op_1_5,  Op_1_6);
endBeforeStart(Op_1_6,  Op_1_7);
endBeforeStart(Op_1_7,  Op_1_8);
endBeforeStart(Op_1_8,  Op_1_9);
endBeforeStart(Op_1_9,  Op_1_10);
endBeforeStart(Op_2_1,  Op_2_2);
endBeforeStart(Op_2_2,  Op_2_3);
endBeforeStart(Op_2_3,  Op_2_4);
endBeforeStart(Op_2_4,  Op_2_5);
endBeforeStart(Op_2_5,  Op_2_6);
endBeforeStart(Op_2_6,  Op_2_7);
endBeforeStart(Op_2_7,  Op_2_8);
endBeforeStart(Op_2_8,  Op_2_9);
endBeforeStart(Op_2_9,  Op_2_10);
endBeforeStart(Op_3_1,  Op_3_2);
endBeforeStart(Op_3_2,  Op_3_3);
endBeforeStart(Op_3_3,  Op_3_4);
endBeforeStart(Op_3_4,  Op_3_5);
endBeforeStart(Op_3_5,  Op_3_6);
endBeforeStart(Op_3_6,  Op_3_7);
endBeforeStart(Op_3_7,  Op_3_8);
endBeforeStart(Op_3_8,  Op_3_9);
endBeforeStart(Op_3_9,  Op_3_10);
endBeforeStart(Op_4_1,  Op_4_2);
endBeforeStart(Op_4_2,  Op_4_3);
endBeforeStart(Op_4_3,  Op_4_4);
endBeforeStart(Op_4_4,  Op_4_5);
endBeforeStart(Op_4_5,  Op_4_6);
endBeforeStart(Op_4_6,  Op_4_7);
endBeforeStart(Op_4_7,  Op_4_8);
endBeforeStart(Op_4_8,  Op_4_9);
endBeforeStart(Op_4_9,  Op_4_10);
endBeforeStart(Op_5_1,  Op_5_2);
endBeforeStart(Op_5_2,  Op_5_3);
endBeforeStart(Op_5_3,  Op_5_4);
endBeforeStart(Op_5_4,  Op_5_5);
endBeforeStart(Op_5_5,  Op_5_6);
endBeforeStart(Op_5_6,  Op_5_7);
endBeforeStart(Op_5_7,  Op_5_8);
endBeforeStart(Op_5_8,  Op_5_9);
endBeforeStart(Op_5_9,  Op_5_10);
endBeforeStart(Op_6_1,  Op_6_2);
endBeforeStart(Op_6_2,  Op_6_3);
endBeforeStart(Op_6_3,  Op_6_4);
endBeforeStart(Op_6_4,  Op_6_5);
endBeforeStart(Op_6_5,  Op_6_6);
endBeforeStart(Op_6_6,  Op_6_7);
endBeforeStart(Op_6_7,  Op_6_8);
endBeforeStart(Op_6_8,  Op_6_9);
endBeforeStart(Op_6_9,  Op_6_10);
endBeforeStart(Op_7_1,  Op_7_2);
endBeforeStart(Op_7_2,  Op_7_3);
endBeforeStart(Op_7_3,  Op_7_4);
endBeforeStart(Op_7_4,  Op_7_5);
endBeforeStart(Op_7_5,  Op_7_6);
endBeforeStart(Op_7_6,  Op_7_7);
endBeforeStart(Op_7_7,  Op_7_8);
endBeforeStart(Op_7_8,  Op_7_9);
endBeforeStart(Op_7_9,  Op_7_10);
endBeforeStart(Op_8_1,  Op_8_2);
endBeforeStart(Op_8_2,  Op_8_3);
endBeforeStart(Op_8_3,  Op_8_4);
endBeforeStart(Op_8_4,  Op_8_5);
endBeforeStart(Op_8_5,  Op_8_6);
endBeforeStart(Op_8_6,  Op_8_7);
endBeforeStart(Op_8_7,  Op_8_8);
endBeforeStart(Op_8_8,  Op_8_9);
endBeforeStart(Op_8_9,  Op_8_10);
endBeforeStart(Op_9_1,  Op_9_2);
endBeforeStart(Op_9_2,  Op_9_3);
endBeforeStart(Op_9_3,  Op_9_4);
endBeforeStart(Op_9_4,  Op_9_5);
endBeforeStart(Op_9_5,  Op_9_6);
endBeforeStart(Op_9_6,  Op_9_7);
endBeforeStart(Op_9_7,  Op_9_8);
endBeforeStart(Op_9_8,  Op_9_9);
endBeforeStart(Op_9_9,  Op_9_10);
endBeforeStart(Op_10_1, Op_10_2);
endBeforeStart(Op_10_2, Op_10_3);
endBeforeStart(Op_10_3, Op_10_4);
endBeforeStart(Op_10_4, Op_10_5);
endBeforeStart(Op_10_5, Op_10_6);
endBeforeStart(Op_10_6, Op_10_7);
endBeforeStart(Op_10_7, Op_10_8);
endBeforeStart(Op_10_8, Op_10_9);
endBeforeStart(Op_10_9, Op_10_10);

noOverlap(Machine_0);
noOverlap(Machine_1);
noOverlap(Machine_2);
noOverlap(Machine_3);
noOverlap(Machine_4);
noOverlap(Machine_5);
noOverlap(Machine_6);
noOverlap(Machine_7);
noOverlap(Machine_8);
noOverlap(Machine_9);


